{"version":3,"sources":["../node_modules/@babel/runtime/node_modules/regenerator-runtime/runtime.js","../node_modules/@babel/runtime/regenerator/index.js","../node_modules/@babel/runtime/helpers/asyncToGenerator.js","../node_modules/@babel/runtime/helpers/classCallCheck.js","../node_modules/@babel/runtime/helpers/createClass.js","../src/lib.js","../src/img-color-grade.js","../src/core.js","index.js"],"names":["componentToHex","c","hex","toString","length","rgb2hex","r","g","b","slice","hexToRgb","result","exec","join","imgColorGrade","imgURL","Error","canvas","getCanvasContext","getContext","width","height","document","createElement","setAttribute","colorCount","ignore","getImageData","data","colors","getImageColorCount","dominant","secondary","palette","Promise","resolve","reject","imgObj","Image","src","handleError","error","onerror","onabort","onload","ctx","drawImage","colorMaps","i","alpha","colorArr","Array","from","subarray","indexOf","undefined","color","map","v","count","counts","Object","values","sort","a","getExtremeValue","arr","getCSSGradientString","getColor","colorsObj","rgbaGradientValues","ImgColorGrade","window","imgs","querySelectorAll"],"mappings":"AEAA,ACAA,ACAA,AJAA,ACAA;ACCA,ACAA,ACAA,AJAA,ACAA;ACCA,ACAA,ACAA,AJAA,AQFA;ANGA,ACAA,ACAA,AJAA;AECA,ACAA,ACAA,AJAA;AECA,ACAA,ACAA,AJAA;AECA,ACAA,ACAA,AJAA,AQLA;ANMA,AEAA,AJAA,AOPA,AFAA,AGEAwE,MAAM,CAAC5B,MAAP,GAAgB,YAAY;ANM5B,AEAA,AJAA,AKPA,AGEI,IHFE5C,EGEIyE,IAAI,GAAGtB,KHFG,AGEE,CAACC,EHFA,EGEN,CAAW9B,MHFtBtB,EGE8B,CAAC0E,WHFd,CAACzE,CAAD,EAAO,CGEF,CAA0B,UAA1B,CAAX,CAAb,CADwB,CAGxB;ANIJ,AEAA,AJAA,AKPI,AGIA,MHJMC,GAAG,GAAGD,CAAC,CAACE,QAAF,CAAW,EAAX,CAAZ;AHQJ,AEAA,AJAA,AKPI,AGIA,SHJOD,GAAG,CAACE,MAAJ,IAAc,CAAd,GAAkB,MAAMF,GAAxB,GAA8BA,GAArC;AHQJ,AEAA,AJAA,AORe,AFCd,AGKG,CHRJ,EAKA,eEHyBa,MAAV,EAAkB;ALSjC,AEAA,AJAA,AORI,ACMA,SDNO,IAAIwD,sBAAJ,CAAkBxD,MAAlB,CAAP;ALSJ,AEAA,AJAA,AORC,ACMG;ANGJ,AEAA,AJAA,AKPO,AGKH,IHLSV,OAAO,GAAG,SAAVA,OAAU,CAACC,CAAD,EAAIC,CAAJ,EAAOC,CAAP,EAAa;AHQpC,AEAA,AJAA,AMZA,ADKI,AGKA,SHLO,MAAM,CAAC,CAAC,KAAK,EAAN,KAAaF,CAAC,IAAI,EAAlB,KAAyBC,CAAC,IAAI,CAA9B,IAAmCC,CAApC,EAAuCL,QAAvC,CAAgD,EAAhD,EAAoDM,KAApD,CAA0D,CAA1D,CAAb;AHQJ,AEAA,AJAA,AKPC,AGKG,CHPG;AHUP,AFAA,AQDI;ANEJ,AFAA,AQDI;ANEJ,AFAA,AMnBA,AEkBI;ANEJ,AFAA,AKVO,AGWH,IHXSC,QAAQ,GAAG,SAAXA,QAAW,CAACR,GAAD,EAAS;AHWjC,AFAA,AKVI,AGWA,MHXMS,MAAM,GAAG,4CAA4CC,IAA5C,CAAiDV,GAAjD,CAAf;AHWJ,AFAA,AKVI,AGWA,IFhBiBY,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":"examples.e31bb0bc.js","sourceRoot":"../examples","sourcesContent":["/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunctionPrototype[toStringTagSymbol] =\n    GeneratorFunction.displayName = \"GeneratorFunction\";\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      prototype[method] = function(arg) {\n        return this._invoke(method, arg);\n      };\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      if (!(toStringTagSymbol in genFun)) {\n        genFun[toStringTagSymbol] = \"GeneratorFunction\";\n      }\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return PromiseImpl.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return PromiseImpl.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new PromiseImpl(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    if (PromiseImpl === void 0) PromiseImpl = Promise;\n\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList),\n      PromiseImpl\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        // Note: [\"return\"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator[\"return\"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  Gp[toStringTagSymbol] = \"Generator\";\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n  typeof module === \"object\" ? module.exports : {}\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n}\n","module.exports = require(\"regenerator-runtime\");\n","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}\n\nmodule.exports = _asyncToGenerator;","function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nmodule.exports = _classCallCheck;","function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nmodule.exports = _createClass;","// r or g or b to 16\nconst componentToHex = (c) => {\n    const hex = c.toString(16);\n    return hex.length == 1 ? \"0\" + hex : hex\n}\n\n//  rgba 与 hex 相互转化\nexport const rgb2hex = (r, g, b) => {\n    return \"#\" + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1)\n}\nexport const hexToRgb = (hex) => {\n    const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex)\n    return result ? `rgb(${result.join()})` : null\n}","/**\n * 函数的实现\n */\nimport {\n    hexToRgb\n} from './lib'\n\nexport default class imgColorGrade {\n    constructor(imgURL) {\n\n        if (typeof imgURL !== 'string') {\n            throw new Error('The parameter must be a url and a string.')\n        }\n\n        this.imgURL = imgURL\n\n        // canvas config\n        this.canvas = this.getCanvasContext()\n        this.canvas = this.canvas.getContext('2d')\n\n    }\n\n    getCanvasContext(width = 100, height = 100) {\n        const canvas = document.createElement('canvas')\n        canvas.setAttribute('width', width)\n        canvas.setAttribute('height', height)\n        return canvas\n    }\n\n    // 对外提供的 API\n    async getColor(colorCount = 10, ignore = []) {\n        const data = await this.getImageData()\n        const colors = this.getImageColorCount(data.data, ignore) || []\n\n        if (colors.length === 0) return {}\n\n        //  添加主色与次色属性\n        return {\n            dominant: colors[0],\n            secondary: colors[1],\n            palette: colorCount ? colors.slice(0, colorCount) : colors\n        }\n    }\n\n    getImageData() {\n        return new Promise((resolve, reject) => {\n            this.imgObj = new Image()\n            this.imgObj.src = this.imgURL\n\n            //  错误处理\n            const handleError = (error = 'The image source failed to load') => reject(new Error(error))\n            this.imgObj.onerror = handleError\n            this.imgObj.onabort = handleError\n\n            //  加载完成\n            this.imgObj.onload = () => {\n                const {\n                    width,\n                    height\n                } = this.imgObj\n                this.canvas = this.getCanvasContext(width, height)\n                this.ctx = this.canvas.getContext('2d')\n                this.ctx.drawImage(this.imgObj, 0, 0, width, height)\n\n                // resolve\n                resolve(this.ctx.getImageData(0, 0, width, height))\n            }\n        })\n    }\n\n    getImageColorCount(data, ignore = []) {\n        const colorMaps = {}\n        for (let i = 0; i < data.length; i += 4) {\n            const alpha = data[i + 3]\n\n            // 透明度需要忽视\n            if (alpha === 0) continue\n\n            let colorArr = Array.from(data.subarray(i, i + 3))\n\n            // 最后的数据\n            if (colorArr.indexOf(undefined) > -1) continue\n\n            const color = alpha && alpha !== 255 ?\n                `rgba(${colorArr.join()},${alpha})` : `rgb(${colorArr.join()})`\n\n\n            // hex 模式的颜色更改为 rgb\n            ignore = ignore.map(v => {\n                if (v.slice(0, 3) !== 'rgb') {\n                    return hexToRgb(v)\n                }\n                return v\n            })\n\n            if (ignore.indexOf(color) > -1) continue\n\n            colorMaps[color] ? ++colorMaps[color].count : (colorMaps[color] = {\n                color,\n                count: 1\n            })\n\n        }\n\n        // 降序排序\n        const counts = Object.values(colorMaps)\n        return counts.sort((a, b) => b.count - a.count)\n    }\n\n    // 对外开放 API，仅为浏览器中可用\n    async getRenderGradient() {\n        // typeof window === 'undefined' ? global : window ;\n        // 通过获取最高色与最低色，然后根据占比生成 css 渐变属性\n        let arr = await this.getExtremeValue()\n        return this.getCSSGradientString(arr)\n    }\n\n    // 获取颜色数据中存在最多的颜色与存在最低的颜色，即数组的首尾\n    async getExtremeValue() {\n        // 最高值 与 最低值，前十个数据\n        const colorsObj = await this.getColor()\n        if (colorsObj.palette.length === 0) {\n            throw new Error('Failed to obtain color data.')\n        }\n\n        return [colorsObj['palette'][0], colorsObj['palette'][colorsObj['palette'].length - 1]]\n    }\n\n    // 通过数据生成颜色属性字符\n    getCSSGradientString(arr) {\n        const rgbaGradientValues = `${arr[0].color} 0%, ${arr[1].color} 75%`\n        return `background-image: -webkit-linear-gradient(135deg, ${rgbaGradientValues});background-image: linear-gradient(135deg, ${rgbaGradientValues});`\n    }\n\n    // 数据分析函数，对调色板数据分析，折线图、柱状图、圆饼图\n    // node 环境 与 浏览器环境\n    // node 环境：利用 nide-chart.sj 生成控制台字符串\n    // 浏览器环境：利用 chart.js 生成一个 canvas，然后用户指定输入位置即可\n}","import ImgColorGrade from './img-color-grade'\n\n\nexport default function (imgURL) {\n    return new ImgColorGrade(imgURL)\n}","import colorGrade from '../src/core.js'\n// import dom from './dom.js'\nwindow.onload = function () {\n    const imgs = Array.from(document.querySelectorAll('.img img'))\n\n    // /** ============ 渐变 ===================== */\n    // const famousImgs = imgs.slice(0, 8)\n    // const famousImgSrc = famousImgs.map(img => img.src)\n\n    // famousImgSrc.forEach((src,index) => {\n    //     const obj = colorGrade(src)\n    //     obj.getRenderGradient().then(rgba => {\n    //         famousImgs[index].parentNode.setAttribute('style', rgba)\n    //     })\n    // })\n\n    // /** =========== 调色板 ====================== */\n    // const paletteImgs = imgs.slice(8, 16)\n    // const paletteImgSrc = paletteImgs.map(img => img.src)\n\n    \n    // const paletteEls = Array.from(document.querySelectorAll('.example-palette .img .palette'))\n    // paletteImgSrc.forEach((src,index) => {\n    //     const obj = colorGrade(src)\n    //     obj.getColor(5).then(color => {\n    //         const html = color.palette.map(o => {\n    //             return `<div style='background:${o.color};border-radius:50%;width:20px;height:20px;margin:5px;'></div>`\n    //         }).join('')\n    //         paletteEls[index] && (paletteEls[index].innerHTML =  html)\n    //     })\n    // })\n}"]}